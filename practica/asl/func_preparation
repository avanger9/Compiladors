void enterfff(AslParser::fffContext *ctx);
	void exitfff(AslParser::fffContext *ctx);

void TypeCheckListener::enterfff(AslParser::fffContext *ctx) {}
void TypeCheckListener::exitfff(AslParser::fffContext *ctx) {}

void CodeGenListener::enterfff(AslParser::fffContext *ctx) {}
void CodeGenListener::exitfff(AslParser::fffContext *ctx) {}

void SymbolsListener::enterfff(AslParser::fffContext *ctx) {}
void SymbolsListener::exitfff(AslParser::fffContext *ctx) {}

types

//typesMgr::typeid
Types.createErrorTy     ();
Types.createIntegerTy   ();
Types.createFloatTy     ();
Types.createBooleanTy   ();
Types.createCharacterTy ();
Types.createVoidTy      ();
Types.createFunctionTy  (const (vector) &paramsTypes, TypeId returnType);
Types.createArrayTy (unsigned int size, TypeId elemType);

//bool func
Types.isErrorTy            (t1) const;
Types.isIntegerTy          (t1) const;
Types.isFloatTy            (t1) const;
Types.isBooleanTy          (t1) const;
Types.isCharacterTy        (t1) const;
Types.isVoidTy             (t1) const;
Types.isNumericTy          (t1) const;
Types.isPrimitiveTy        (t1) const;
Types.isPrimitiveNonVoidTy (t1) const;

//func func
bool                        isFunctionTy       (TypeId tid)     const;
const std::vector<TypeId> & getFuncParamsTypes (TypeId tid)     const;
TypeId                      getFuncReturnType  (TypeId tid)     const;
std::size_t                 getNumOfParameters (TypeId tid)     const;
TypeId                      getParameterType   (TypeId tid, unsigned int i) const;
bool                        isVoidFunction     (TypeId tid)     const;

//array func
bool         isArrayTy        (TypeId tid) const;
unsigned int getArraySize     (TypeId tid) const;
TypeId       getArrayElemType (TypeId tid) const;

symbols

Symbol.addLocalVar  (const std::string & ident, TypesMgr::TypeId type);
Symbol.addParameter (const std::string & ident, TypesMgr::TypeId type);
SymboladdFunction  (const std::string & ident, TypesMgr::TypeId type);

Symbol.isLocalVarClass  (const std::string & ident) const;
Symbol.isParameterClass (const std::string & ident) const;
Symbol.isFunctionClass  (const std::string & ident) const;

TypesMgr::TypeId getType (const std::string & ident) const;

Symbol.getCurrentFunctionTy () const;
Symbol.setCurrentFunctionTy (TypesMgr::TypeId type);

code

errors

array:   address(A[i]) = Base(A) + i*sizeElem
matrix:  address(A[i][j]) = address(A[i]) + j*sizeElem

struct:  address(A.z) = base(A) + offset(A.z)

pointers:
	E -> (*|&)E1
		E.addr = new temp()
		E.code = E1.code || "E.addr = (*|&)E1.addr"